//java_assignment2


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Driver {
    String carModel;
    double rating;
    int distanceFromCustomer;

    public Driver(String carModel, double rating, int distanceFromCustomer) {
        this.carModel = carModel;
        this.rating = rating;
        this.distanceFromCustomer = distanceFromCustomer;
    }
}

public class RentARide {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get customer ride distance
        System.out.print("Enter customer ride distance (in km): ");
        int rideDistance = scanner.nextInt();

        // Get requested car model
        System.out.print("Enter requested car model: ");
        String requestedCar = scanner.next();

        // Create a list of drivers
        List<Driver> drivers = new ArrayList<>();

        // Get the number of drivers
        System.out.print("Enter the number of drivers: ");
        int numDrivers = scanner.nextInt();

        // Get driver details
        for (int i = 0; i < numDrivers; i++) {
            System.out.println("Enter details for Driver " + (i + 1) + ":");

            System.out.print("Car Model: ");
            String carModel = scanner.next();

            System.out.print("Rating: ");
            double rating = scanner.nextDouble();

            System.out.print("Distance From Customer (in meters): ");
            int distanceFromCustomer = scanner.nextInt();

            drivers.add(new Driver(carModel, rating, distanceFromCustomer));
        }

        scanner.close();

        // Find the eligible drivers
        Driver selectedDriver = null;
        int closestDistance = Integer.MAX_VALUE;

        for (Driver driver : drivers) {
            if (driver.carModel.equalsIgnoreCase(requestedCar) && driver.rating >= 4.0 && driver.distanceFromCustomer < closestDistance) {
                selectedDriver = driver;
                closestDistance = driver.distanceFromCustomer;
            }
        }

        // Handle case when no eligible driver is found
        if (selectedDriver == null) {
            System.out.println("No driver available for the requested car model.");
            return;
        }

        // Calculate the total charge
        int totalCharge = rideDistance * 8;

        // Print the output
        System.out.println("Driver " + selectedDriver.carModel + " will get you to the destination.");
        System.out.println("Your charge will be Rs " + totalCharge + ".");
    }
}
